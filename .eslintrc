{
  "ecmaFeatures": {
    "jsx": true,
    "modules": true,
    "arrowFunctions": true,
    "blockBindings": true,
    "classes": true,
    "defaultParams": true,
    "destructuring": true,
    "forOf": true,
    "generators": false,
    "modules": true,
    "objectLiteralComputedProperties": true,
    "objectLiteralDuplicateProperties": false,
    "objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    "spread": true,
    "superInFunctions": true,
    "templateStrings": true
  },
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "parser": "babel-eslint",
  "rules": {
    /**
     * Best Practices
     * These are rules designed to prevent you from making mistakes.
     * They either prescribe a better way of doing something or help you avoid footguns.
     */
    "accessor-pairs": 2, // Enforces getter/setter pairs in objects (off by default)
    "block-scoped-var": 0, // treat var statements as if they were block scoped (off by default).
    "complexity": [0, 11], // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 2, // require return statements to either always or never specify values
    "curly": 2, // specify curly brace conventions for all control statements
    "default-case": 2, // require default case in switch statements (off by default)
    "dot-notation": [2, { "allowKeywords": true}],
    "dot-location": 0, // enforces consistent newlines before or after dots (off by default)
    "eqeqeq": 2, // require the use of === and !==
    "guard-for-in": 2, // make sure for-in loops have an if statement (off by default)
    "no-alert": 2, // disallow the use of alert, confirm, and prompt
    "no-caller": 2, // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression
    "no-else-return": 2, // disallow else after a return in an if
    "no-empty-label": 2, // disallow use of labels for anything other then loops and switches
    "no-eq-null": 0, // disallow comparisons to null without a type-checking operator (off by default
    "no-eval": 2,  // disallow use of eval()
    "no-extend-native": 2, // disallow adding to native types
    "no-extra-bind": 2, // disallow unnecessary function binding
    "no-labels": 2, // disallow use of labeled statements
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow creation of functions within loops
    "no-multi-spaces": 2, // disallow use of multiple spaces
    "no-process-env": 0, // disallow use of process.env
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same (off by default)
    "no-unused-expressions": 2, // disallow usage of expressions in statement position
    "strict": [2, "never"], // controls location of Use Strict Directives. 0: required by `babel-eslint`

    /**
    * Stylistic Rules
    * These rules are purely matters of style and are quite subjective.
    */
    "array-bracket-spacing": [2, "never"], // enforce spacing inside array brackets (off by default),
    "block-spacing": [2, "always"], // disallow or enforce spaces inside of single line blocks (fixable)
    "brace-style": [2], // enforce one true brace style (off by default)
    "camelcase": 2, // require camel case names
    "comma-style": [2, "last"], // enforce one true comma style (off by default)
    "consistent-this": 0, // Forces consistent naming when capturing the current execution context
    "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0, // require function expressions to have a name (off by default)
    "func-style": 0, // enforces use of function declarations or expressions (off by default)
    "id-length": [2, {"min": 2, "properties": "never"}], // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    "indent": [2, 2], // this option sets a specific tab width for your code (off by default)
    "key-spacing": [2, {"beforeColon": false, "afterColon": true}], // enforces spacing between keys and values in object literal properties
    "linebreak-style": [2, "unix"], //disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
    "new-cap": [2, {"newIsCap": true, "capIsNew": false}], // require a capital letter for constructors
    "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": [2, {"max": 2}], // disallow multiple empty lines (off by default)
    "no-nested-ternary": 2, // disallow nested ternary expressions (off by default)
    "no-spaced-func": 2, // disallow space between function identifier and application
    "no-ternary": 0, // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines
    "quotes": [2, "single"], // specify whether double or single quotes should be used
    "semi-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after semicolons
    "sort-vars": 0, // sort variables within the same declaration block (off by default)
    "space-after-keywords": [2, "always"], // require a space after certain keywords (off by default)
    "space-before-blocks": [2, "always"], // require or disallow space before blocks (off by default)
    "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}], // require or disallow space before function opening parenthesis (off by default)
    "space-in-parens": [2, "never"], // require or disallow spaces inside parentheses (off by default)

    /**
     * These rules are only relevant to ES6 environments and are off by default.
     */
    "constructor-super": 2, //verify super() callings in constructors (off by default)
    "generator-star-spacing": [2, "before"], //enforce the spacing around the * in generator functions (off by default)
    "no-this-before-super": 2, //disallow to use this/super before super() calling in constructors. (off by default)
    "no-var": 2, //require let or const instead of var (off by default)
    "object-shorthand": 0, //require method and property shorthand syntax for object literals (off by default)
    "prefer-const": 2, //suggest using of const declaration for variables that are never modified after declared (off by default)

    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "react/react-in-jsx-scope": 2
  },
  "plugins": [
    "react"
  ]
}
